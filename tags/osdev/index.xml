<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>OsDev on GetToKnow</title>
    <link>https://ayg0.github.io/gettoknow.github.io/tags/osdev/</link>
    <description>Recent content in OsDev on GetToKnow</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 01 Feb 2023 18:45:02 +0100</lastBuildDate><atom:link href="https://ayg0.github.io/gettoknow.github.io/tags/osdev/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>OsModes</title>
      <link>https://ayg0.github.io/gettoknow.github.io/posts/osmodes/</link>
      <pubDate>Wed, 01 Feb 2023 18:45:02 +0100</pubDate>
      
      <guid>https://ayg0.github.io/gettoknow.github.io/posts/osmodes/</guid>
      <description>Real mode ? Imaginary mode ? Real / Protected / long Modes: =&amp;gt; What are these anyway: Real mode, protected mode, and long mode are different operating modes that have been introduced in x86 architecture-based computers to provide various levels of memory access and protection, as well as other features and capabilities. =&amp;gt; So Real Mode is not ?: Real Mode is a 16-bit mode that was used in the early x86 processors, and it&amp;#39;s the mode that the computer uses ones it turns on, so even our friend the BIOS, functions in 16-bit mode.</description>
    </item>
    
    <item>
      <title>BIOS</title>
      <link>https://ayg0.github.io/gettoknow.github.io/posts/bios/</link>
      <pubDate>Wed, 01 Feb 2023 18:44:54 +0100</pubDate>
      
      <guid>https://ayg0.github.io/gettoknow.github.io/posts/bios/</guid>
      <description>BIOS: you need int 0x10 not int 0x13 The BIOS: =&amp;gt; What&#39;s the BIOS: BIOS (Basic Input/Output System) is a type of *firmware that provides an interface between computer&amp;#39;s hardware and software (OS), it&amp;#39;s stored on a *non-volatile memory chip on the mother board. The BIOS is the First program loaded When the computer is powered on, and it&amp;#39;s responsible for performing a series of system checks and initializations. =&amp;gt; BIOS ?</description>
    </item>
    
    <item>
      <title>BootingSequence</title>
      <link>https://ayg0.github.io/gettoknow.github.io/posts/bootingsequence/</link>
      <pubDate>Tue, 31 Jan 2023 18:30:36 +0100</pubDate>
      
      <guid>https://ayg0.github.io/gettoknow.github.io/posts/bootingsequence/</guid>
      <description>Welcome from now on, we will start the real work. Starting from the beginning: =&amp;gt; Booting your computer: Booting is a startup sequence that starts the Operating system in your computer once it&amp;#39;s turned on. The boot sequence is the initial set of steps/instructions that your computer perform when it&amp;#39;s swiched on. =&amp;gt; CPU: CPU (The Central Proccecing Unit) is the brain of our computer, it&amp;#39;s the piece that handles all the instructions and operations you&amp;#39;ll need to open youtube and watch some cat videos (The GPU plays a role when it comes to media .</description>
    </item>
    
    <item>
      <title>OsDevKnowledge</title>
      <link>https://ayg0.github.io/gettoknow.github.io/posts/osdevknowledge/</link>
      <pubDate>Tue, 31 Jan 2023 17:56:29 +0100</pubDate>
      
      <guid>https://ayg0.github.io/gettoknow.github.io/posts/osdevknowledge/</guid>
      <description>What and Why ? Knowledge that will be and is really helpful and needed as an OsDev, don&amp;#39;t worry it may look like a lot but ... there is no but it is a lot. =&amp;raquo; Boot Sequence =&amp;raquo; BIOS =&amp;raquo; Real/Protected/long Modes </description>
    </item>
    
    <item>
      <title>GccCrossCompiler</title>
      <link>https://ayg0.github.io/gettoknow.github.io/posts/gcccrosscompiler/</link>
      <pubDate>Fri, 27 Jan 2023 19:08:36 +0100</pubDate>
      
      <guid>https://ayg0.github.io/gettoknow.github.io/posts/gcccrosscompiler/</guid>
      <description>Cross-Compilers &amp;gt; What&amp;rsquo;s a Cross Compiler ? - A cross Compiler is simply a compiler that runs on the host platform (for example MacOS), and generate executables for the target platform (for example Windows). &amp;gt; Why we need a Cross Compiler ? - The only reason not to use a cross compiler is if you&#39;re generating executables for your own machine, where both the host and the targets are the same, and it&#39;s not the case for our projects now.</description>
    </item>
    
    <item>
      <title>BasicsOfBasics_OsDev</title>
      <link>https://ayg0.github.io/gettoknow.github.io/posts/basicsofbasics_osdev/</link>
      <pubDate>Fri, 27 Jan 2023 18:30:30 +0100</pubDate>
      
      <guid>https://ayg0.github.io/gettoknow.github.io/posts/basicsofbasics_osdev/</guid>
      <description>Introduction: In a journey to understand how Operating systems works, I&#39;ll do an attempt of making a minimalistic operating system. This is the first blog that will discuss the main steps I followed to have it at this state. And also provide All resources I&#39;ve used. Resources: OsDevWiki Awesome Os EMPTY EMPTY STEPS: Building a Cross-Compiler Needed Knowledge to Procceed !! Boot Sector </description>
    </item>
    
  </channel>
</rss>
